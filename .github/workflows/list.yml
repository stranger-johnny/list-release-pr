name: List Release PRs

on:
  push:
    branches:
      - main

jobs:
  list-prs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: List PRs and Prepare Slack Message
        id: list-prs
        run: |
          PR_NUMBERS=()
          
          declare -A PR_AUTHOR_BY_NUMBER
          declare -A PR_TITLE_BY_NUMBER
          declare -A PR_LINK_BY_NUMBER 
          declare -A PRS_BY_AUTHOR 

          REPO_OWNER=$(echo "${GITHUB_REPOSITORY}" | cut -d'/' -f1)
          REPO_NAME=$(echo "${GITHUB_REPOSITORY}" | cut -d'/' -f2)

          # ActionsがトリガーされたPRの番号を取得
          TRIGGER_PR_NUMBER=$(gh pr list --search ${{ github.event.head_commit.id }} --state merged --json number --jq '.[].number')

          # ActionsがトリガーされたPRに含まれるコミットを取得
          COMMIT_OIDS=$(gh pr view $TRIGGER_PR_NUMBER --json commits --jq '.commits[].oid')

          # ActionsがトリガーされたPRに含まれるコミットからメタデータを取得
          for COMMIT_OID in $COMMIT_OIDS; do
            echo "Commit: $COMMIT_OID"

            PR_DETAILS=$(gh pr list --search "$COMMIT_OID" --state merged --json number,author,title --jq '.[0]')
            PR_NUMBER=$(echo "$PR_DETAILS" | jq -r '.number')

            # 一度取得したPRはスキップ、またActionsがトリガーされたPRと同じPRもスキップ
            if [[ " ${PR_NUMBERS[@]} " =~ " $PR_NUMBER " ]] || [[ "$PR_NUMBER" == "$TRIGGER_PR_NUMBER" ]]; then
              continue
            fi

            PR_NUMBERS+=("$PR_NUMBER")
            PR_AUTHOR=$(echo "$PR_DETAILS" | jq -r '.author.login')
            PR_TITLE=$(echo "$PR_DETAILS" | jq -r '.title')
            PR_AUTHOR_BY_NUMBER["$PR_NUMBER"]="$PR_AUTHOR"
            PR_TITLE_BY_NUMBER["$PR_NUMBER"]="$PR_TITLE"
          done

          # PRがない場合はhotfix扱いとして、ActionsがトリガーされたPRをリストに追加
          if [ ${#PR_NUMBERS[@]} -eq 0 ]; then
            PR_NUMBER=${{ github.event.pull_request.number }}
            PR_AUTHOR=${{github.event.pull_request.user.login}}
            PR_TITLE=${{github.event.pull_request.title}}
            PR_NUMBER=${{ github.event.pull_request.number }}
            PR_NUMBERS+=("${{ github.event.pull_request.number }}") 

            PR_AUTHOR_BY_NUMBER["$PR_NUMBER"]="$PR_AUTHOR"
            PR_TITLE_BY_NUMBER["$PR_NUMBER"]="$PR_TITLE"
          fi

          # PRのリンクを作成し、Authorごとにグループ化
          for PR_NUMBER in "${PR_NUMBERS[@]}"; do
            PR_LINK="https://github.com/$REPO_OWNER/$REPO_NAME/pull/$PR_NUMBER"
            PR_LINK_BY_NUMBER["$PR_NUMBER"]="$PR_LINK"

            PR_AUTHOR="${PR_AUTHOR_BY_NUMBER[$PR_NUMBER]}"
            PR_TITLE="${PR_TITLE_BY_NUMBER[$PR_NUMBER]}"

            PRS_BY_AUTHOR["$PR_AUTHOR"]+="<$PR_LINK|#$PR_NUMBER> $PR_TITLE\n"
          done

          # すべてのPRをテキストとして出力
          PR_LIST=""
          for AUTHOR in "${!PRS_BY_AUTHOR[@]}"; do
            PR_LIST+=$(printf "*%s*\n%b\n" "$AUTHOR" "${PRS_BY_AUTHOR[$AUTHOR]}")
          done

          echo "pr_list=$(jq -R -s . <<< "$PR_LIST")" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Send to Slack
        uses: slackapi/slack-github-action@v2.0.0
        with:
          webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
          webhook-type: incoming-webhook
          payload: | 
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*リリース予定のPR一覧*"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": ${{ steps.list-prs.outputs.pr_list }}
                  }
                }
              ]
            }
  