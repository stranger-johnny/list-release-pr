name: List Release PRs

on:
  push:
    branches:
      - main

jobs:
  list-prs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: List PRs and Prepare Slack Message
        id: list-prs
        run: |
          ##############################################################################
          # 定数・変数の設定
          ##############################################################################
          TOKEN="${{ secrets.GITHUB_TOKEN }}"
          REPO_OWNER=$(echo "${{ github.repository }}" | cut -d'/' -f1)
          REPO_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2)
          GITHUB_API="https://api.github.com/repos/${REPO_OWNER}/${REPO_NAME}"
          HEAD_COMMIT_ID="${{ github.event.head_commit.id }}"

          ##############################################################################
          # API呼び出し用関数
          ##############################################################################
          call_api() {
            local endpoint="$1"
            curl -s -H "Authorization: token ${TOKEN}" \
                 -H "Accept: application/vnd.github.v3+json" \
                 "$endpoint"
          }

          ##############################################################################
          # PR情報格納用の配列初期化
          ##############################################################################
          declare -a PR_NUMBERS=()
          declare -A PR_AUTHOR_BY_NUMBER
          declare -A PR_TITLE_BY_NUMBER
          declare -A PR_LINK_BY_NUMBER 
          declare -A PRS_BY_AUTHOR

          ##############################################################################
          # トリガーされたPR情報取得
          ##############################################################################
          TRIGGER_RESPONSE=$(call_api "$GITHUB_API/commits/$HEAD_COMMIT_ID/pulls")
          TRIGGER_PR_NUMBER=$(echo "$TRIGGER_RESPONSE" | jq -r '.[0].number')
          TRIGGER_PR_DETAILS=$(echo "$TRIGGER_RESPONSE" | jq -r '.[0]')

          ##############################################################################
          # トリガーPRに含まれるコミットのSHAを取得
          ##############################################################################
          COMMIT_OIDS=$(call_api "$GITHUB_API/pulls/${TRIGGER_PR_NUMBER}/commits" | jq -r '.[].sha')

          ##############################################################################
          # コミットごとに関連PR情報を抽出（既に取得済み、またはトリガーPRは除外）
          ##############################################################################
          for COMMIT_OID in $COMMIT_OIDS; do
            echo "Commit: ${COMMIT_OID}"
            pr_json=$(call_api "$GITHUB_API/commits/${COMMIT_OID}/pulls")
            pr_entry=$(echo "$pr_json" | jq -r '.[0]')
            pr_number=$(echo "$pr_entry" | jq -r '.number')

            # 既に情報が取得済み、またはトリガーPRの場合はスキップ
            if [[ -n "${PR_AUTHOR_BY_NUMBER[$pr_number]}" ]] || [[ "$pr_number" == "$TRIGGER_PR_NUMBER" ]]; then
              continue
            fi

            PR_NUMBERS+=("${pr_number}")
            PR_AUTHOR_BY_NUMBER["${pr_number}"]=$(echo "$pr_entry" | jq -r '.user.login')
            PR_TITLE_BY_NUMBER["${pr_number}"]=$(echo "$pr_entry" | jq -r '.title')
          done

          ##############################################################################
          # 他のPRが見つからなかった場合は、HotfixとみなしてトリガーPRの情報を使用
          ##############################################################################
          if [ ${#PR_NUMBERS[@]} -eq 0 ]; then
            PR_NUMBERS+=("${TRIGGER_PR_NUMBER}")
            PR_AUTHOR_BY_NUMBER["${TRIGGER_PR_NUMBER}"]=$(echo "$TRIGGER_PR_DETAILS" | jq -r '.user.login')
            PR_TITLE_BY_NUMBER["${TRIGGER_PR_NUMBER}"]=$(echo "$TRIGGER_PR_DETAILS" | jq -r '.title')
          fi

          ##############################################################################
          # PRリンク作成および作者ごとにグループ化
          ##############################################################################
          for pr_number in "${PR_NUMBERS[@]}"; do
            pr_link="${GITHUB_API}/pull/${pr_number}"
            PR_LINK_BY_NUMBER["${pr_number}"]="${pr_link}"

            author="${PR_AUTHOR_BY_NUMBER[$pr_number]}"
            title="${PR_TITLE_BY_NUMBER[$pr_number]}"
            PRS_BY_AUTHOR["${author}"]+="<${pr_link}|#${pr_number}> ${title}\n"
          done

          ##############################################################################
          # 出力用文字列の整形
          ##############################################################################
          output=""
          for author in "${!PRS_BY_AUTHOR[@]}"; do
            output+=$(printf "*%s*\n%b\n" "${author}" "${PRS_BY_AUTHOR[$author]}")
          done

          echo "pr_list=$(jq -R -s . <<< "${output}")" >> "$GITHUB_OUTPUT"

      - name: Send to Slack
        uses: slackapi/slack-github-action@v2.0.0
        with:
          webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
          webhook-type: incoming-webhook
          payload: | 
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*リリース予定のPR一覧です*"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": ${{ steps.list-prs.outputs.pr_list }}
                  }
                }
              ]
            }
  